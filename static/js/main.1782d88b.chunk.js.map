{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["MostraVoltas","props","voltas","MostraTempo","tempo","Button","onClick","text","App","useState","numVoltas","setNumVoltas","useEffect","setInterval","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAGMA,EAAe,SAACC,GACpB,OACA,8BAAIA,EAAMC,OAAV,IAAkB,uBAAlB,aAKIC,EAAc,SAACF,GACnB,OACE,8BAAIA,EAAMG,MAAV,IAAiB,uBAAjB,+BAIEC,EAAS,SAACJ,GAAD,OAAW,yBAAQK,QAAWL,EAAMK,QAAzB,cACxBL,EAAMM,SAuCOC,MAnCf,WAAe,MAEqBC,mBAAS,GAF9B,mBAENC,EAFM,KAEKC,EAFL,OAIiBF,oBAAS,GAJ1B,gCAKaA,mBAAS,IALtB,mBAKNL,EALM,KAuBb,OAvBa,KAObQ,qBAAU,WACRC,aAAY,WACVC,QAAQC,IAAI,aACX,OAEF,IAYD,gCACE,cAAC,EAAD,CAAcb,OAAQQ,IACtB,cAAC,EAAD,CAAQH,KAAO,IAAID,QAXL,WAChBK,EAAaD,EAAY,MAWvB,cAAC,EAAD,CAAQH,KAAO,IAAID,QARL,WAChBK,EAAaD,EAAY,MAQvB,cAAC,EAAD,CAAaN,MAASA,IACtB,cAAC,EAAD,CAAQG,KAAO,YACf,cAAC,EAAD,CAAQA,KAAO,kBCvCNS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1782d88b.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\n\n//arrowFunction\nconst MostraVoltas = (props) =>{ \n  return(\n  <p>{props.voltas} <br/>\n  Voltas</p>)\n}\n\n\nconst MostraTempo = (props) => {\n  return(\n    <p>{props.tempo} <br/>\n    Tempo médio por volta</p>)\n}\n\nconst Button = (props) => <button onClick = {props.onClick} > { \n  props.text\n\n}</button>\n\nfunction App() {\n  //elemento que faz o número de voltas modificar\n  const [numVoltas, setNumVoltas] = useState(0)\n  //ver se o contador está rodando ou não\n  const [running, setRunning] = useState(false)\n  const [tempo, setTempo] = useState(0)\n\n  useEffect(() =>{\n    setInterval(() => {\n      console.log('Chamou!')\n    }, 1000)\n\n  }, [])\n\n  // função de acrescimo do número de voltas somando\n  const increment = () =>{\n    setNumVoltas(numVoltas + 1)\n  }\n\n  const decrement = () =>{\n    setNumVoltas(numVoltas - 1)\n  } \n\n  return (\n    <div>\n      <MostraVoltas voltas={numVoltas}/>\n      <Button text = '+' onClick={increment} />\n      <Button text = '-' onClick={decrement} />\n      <MostraTempo tempo = {tempo}/>\n      <Button text = 'Iniciar' />\n      <Button text = 'Reiniciar' />\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}